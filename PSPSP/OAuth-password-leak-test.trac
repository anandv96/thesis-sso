Protocol: OAuth

Enumerations:
  hon = {a}
  dis = {i}
  ca = {s}
  agent = hon ++ dis
  idp = hon
  TLShon = hon
  user = agent
  rp = agent

Sets:
  dishonest/0
  tls_step1/2
  tls_step2/1
  tls_step3/2

  clientSessionKeys/2
  serverSessionKeysUnauth/1
  secretData/2

  rp_state/2
  auth_codes/3
  access_tokens/2



Functions:
Public
  sign/2 crypt/2 scrypt/2 tuple/2 h/3 serverK/1 clientK/1 
  initiateSSO/2
  authReq/4 authResp/3 tokenReq/3 pk/1
  tok/1 sec/1
Private
  cred/1 cid/1 inv/1 pw/1 ox/1 session/4

Analysis:
  tuple(X,Y) -> X,Y
  sign(X,Y) -> Y
  crypt(X,Y) ? inv(X) -> Y
  scrypt(X,Y) ? X -> Y
  initiateSSO(X,Y) -> X,Y
  authReq(W,X,Y,Z) -> W,X,Y,Z
  tokenReq(X,Y,Z) -> X,Y,Z
  authResp(X,Y,Z) -> X,Y,Z
  tok(X) -> X
  cred(X) -> X
  sec(X) -> X

# The first protocol
Transactions of tls:

initialKnowledge2'(B:dis)
* send inv(pk(B))
  send sign(inv(pk(s)),tuple(B,pk(B))).

intruderGen'()
  new VAL
* insert VAL dishonest
* send ox(VAL), VAL.  

clientHello(A:TLShon,B:agent)
  new NA
  insert NA tls_step1(A,B)
* send NA.

serverHello(B:TLShon,NA:value)
  receive NA
  new NB
  insert NB tls_step2(B)
* send NB
  send sign(inv(pk(s)),tuple(B,pk(B))).

client_key_ex(A:TLShon,B:TLShon,NA:value,NB:value)
  receive NB
  NA in tls_step1(A,B)
  delete NA tls_step1(A,B)
  new PMS
* insert PMS tls_step3(A,B)
* send ox(PMS)
  send crypt(pk(B),PMS)
  send scrypt(clientK(PMS),h(PMS,NA,NB)).

client_key_exD(A:TLShon,B:dis,NA:value,NB:value)
  receive NB
  NA in tls_step1(A,B)
  delete NA tls_step1(A,B)
  new PMS
* insert PMS tls_step3(A,B)
* send ox(PMS), PMS
  send crypt(pk(B),PMS)
  send scrypt(clientK(PMS),h(PMS,NA,NB)).
  

server_key_ex(B:TLShon,NA:value,NB:value,PMS:value)
* receive ox(PMS)
  receive crypt(pk(B),PMS)
  receive scrypt(clientK(PMS),h(PMS,NA,NB))
  NB in tls_step2(B)
  delete NB tls_step2(B)
* insert PMS serverSessionKeysUnauth(B)
  send scrypt(serverK(PMS),h(PMS,NA,NB)).


clientFinishedData(A:TLShon,B:agent,NA:value,NB:value,PMS:value)
* receive ox(PMS)
  receive scrypt(serverK(PMS),h(PMS,NA,NB))
* PMS in tls_step3(A,B)
* delete PMS tls_step3(A,B)
* insert PMS clientSessionKeys(A,B).

### Attacks


secrecyGoal(A:TLShon,B:TLShon,K:value)
  receive K
* K in clientSessionKeys(A,B)
  attack.

secrecyGoal'(A:TLShon,B:TLShon,PMS:value)
  receive PMS
* PMS in tls_step3(A,B)
  attack.



# =============================================================================
# =============================================================================
# The second protocol
Transactions of sso:

ssoKnowledge(A:hon) 
* send A
* send pk(A)
  send pw(A).

ssoKnowledge2(B:dis)
* send inv(pk(B))
* send pk(B)
* send B
  send pw(B).


#takes the password and sends out the pw secret in exchange
sendSec(A:agent, B:agent, K:value)
  receive scrypt(clientK(K), pw(A))
  K in serverSessionKeysUnauth(B)
  new PwSecret
  insert PwSecret secretData(A,B)
#  send scrypt(pw(A), sec(PwSecret)).
  send scrypt(serverK(K), sec(PwSecret)).

pwSecretAttack(A:hon, B:hon, PwSecret: value)
  receive PwSecret
  PwSecret in secretData(A,B)
  attack.
